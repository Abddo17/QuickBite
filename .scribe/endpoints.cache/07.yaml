## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Comment Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/commentaires
    metadata:
      groupName: 'Comment Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List all comments'
      description: 'Retrieves a list of all comments, including their associated user and product details.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
              "id": 1,
              "userId": 1,
              "produitId": 1,
              "content": "Great product, highly recommend!",
              "rating": 5,
              "created_at": "2025-05-19T18:02:00+01:00",
              "updated_at": "2025-05-19T18:02:00+01:00",
              "utilisateur": {
                "userId": 1,
                "username": "johndoe",
                "email": "john@example.com"
              },
              "product": {
                "produitId": 1,
                "nom": "Laptop",
                "prix": 749.99
              }
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/commentaires
    metadata:
      groupName: 'Comment Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new comment'
      description: 'Stores a new comment for a product by the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      produitId:
        name: produitId
        description: 'The ID of the product being commented on.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      content:
        name: content
        description: 'The content of the comment.'
        required: true
        example: 'Great product, highly recommend!'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      rating:
        name: rating
        description: 'optional The rating for the product (1 to 5).'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      produitId: 1
      content: 'Great product, highly recommend!'
      rating: 5
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 1,
            "userId": 1,
            "produitId": 1,
            "content": "Great product, highly recommend!",
            "rating": 5,
            "created_at": "2025-05-19T18:02:00+01:00",
            "updated_at": "2025-05-19T18:02:00+01:00",
            "utilisateur": {
              "userId": 1,
              "username": "johndoe",
              "email": "john@example.com"
            },
            "product": {
              "produitId": 1,
              "nom": "Laptop",
              "prix": 749.99
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": {
              "produitId": ["The selected produit id is invalid."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/commentaires/{commentaire_commentaireId}'
    metadata:
      groupName: 'Comment Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a specific comment'
      description: 'Retrieves the details of a comment by its ID, including its associated user and product.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      commentaire_commentaireId:
        name: commentaire_commentaireId
        description: ''
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      commentaire_commentaireId: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "userId": 1,
            "produitId": 1,
            "content": "Great product, highly recommend!",
            "rating": 5,
            "created_at": "2025-05-19T18:02:00+01:00",
            "updated_at": "2025-05-19T18:02:00+01:00",
            "utilisateur": {
              "userId": 1,
              "username": "johndoe",
              "email": "john@example.com"
            },
            "product": {
              "produitId": 1,
              "nom": "Laptop",
              "prix": 749.99
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/commentaires/{commentaire_commentaireId}'
    metadata:
      groupName: 'Comment Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a comment'
      description: "Updates the content or rating of an existing comment by its ID. Only accessible to the comment's owner."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      commentaire_commentaireId:
        name: commentaire_commentaireId
        description: ''
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      commentaire_commentaireId: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      content:
        name: content
        description: 'The updated content of the comment.'
        required: true
        example: 'Updated: Really great product!'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      rating:
        name: rating
        description: 'optional The updated rating for the product (1 to 5).'
        required: false
        example: 4
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      content: 'Updated: Really great product!'
      rating: 4
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "userId": 1,
            "produitId": 1,
            "content": "Updated: Really great product!",
            "rating": 4,
            "created_at": "2025-05-19T18:02:00+01:00",
            "updated_at": "2025-05-19T18:03:00+01:00",
            "utilisateur": {
              "userId": 1,
              "username": "johndoe",
              "email": "john@example.com"
            },
            "product": {
              "produitId": 1,
              "nom": "Laptop",
              "prix": 749.99
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": {
              "content": ["The content field is required."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/commentaires/{commentaire_commentaireId}'
    metadata:
      groupName: 'Comment Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a comment'
      description: "Removes a comment from the database by its ID. Only accessible to the comment's owner."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      commentaire_commentaireId:
        name: commentaire_commentaireId
        description: ''
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      commentaire_commentaireId: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "Unauthorized."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
