## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Gestion des Utilisateurs'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: 'Gestion des Utilisateurs'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Lister tous les utilisateurs'
      description: 'Récupère la liste de tous les utilisateurs.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            {
              "userId": 1,
              "username": "johndoe",
              "email": "john@example.com",
              "adresse": "123 Rue Principale, Ville",
              "role": "user",
              "createdAt": "2025-05-19T18:15:00+01:00",
              "updated_at": "2025-05-19T18:15:00+01:00"
            },
            {
              "userId": 2,
              "username": "janedoe",
              "email": "jane@example.com",
              "adresse": null,
              "role": "admin",
              "createdAt": "2025-05-19T18:15:00+01:00",
              "updated_at": "2025-05-19T18:15:00+01:00"
            }
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/users
    metadata:
      groupName: 'Gestion des Utilisateurs'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Créer un nouvel utilisateur'
      description: 'Crée un nouvel utilisateur dans la base de données.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      username:
        name: username
        description: "Le nom d'utilisateur (max 255 caractères)."
        required: true
        example: johndoe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "L'adresse e-mail de l'utilisateur (doit être unique)."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "Le mot de passe de l'utilisateur (minimum 6 caractères)."
        required: true
        example: secret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      adresse:
        name: adresse
        description: "optional L'adresse de l'utilisateur (max 255 caractères)."
        required: false
        example: '123 Rue Principale, Ville'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      role:
        name: role
        description: "Le rôle de l'utilisateur (user ou admin)."
        required: true
        example: user
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      username: johndoe
      email: john@example.com
      password: secret123
      adresse: '123 Rue Principale, Ville'
      role: user
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "userId": 1,
            "username": "johndoe",
            "email": "john@example.com",
            "adresse": "123 Rue Principale, Ville",
            "role": "user",
            "createdAt": "2025-05-19T18:15:00+01:00",
            "updated_at": "2025-05-19T18:15:00+01:00"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": {
              "email": ["The email has already been taken."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: 'Gestion des Utilisateurs'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Récupérer un utilisateur spécifique'
      description: "Récupère les détails d'un utilisateur par son ID."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "userId": 1,
            "username": "johndoe",
            "email": "john@example.com",
            "adresse": "123 Rue Principale, Ville",
            "role": "user",
            "createdAt": "2025-05-19T18:15:00+01:00",
            "updated_at": "2025-05-19T18:15:00+01:00"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/users/{id}'
    metadata:
      groupName: 'Gestion des Utilisateurs'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Mettre à jour un utilisateur'
      description: "Met à jour les détails d'un utilisateur existant par son ID."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      username:
        name: username
        description: "Le nom d'utilisateur (max 255 caractères)."
        required: true
        example: johndoe
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "L'adresse e-mail de l'utilisateur (doit être unique)."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "optional Le nouveau mot de passe de l'utilisateur (minimum 6 caractères)."
        required: false
        example: newsecret123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      adresse:
        name: adresse
        description: "optional L'adresse de l'utilisateur (max 255 caractères)."
        required: false
        example: '456 Avenue Secondaire, Ville'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      role:
        name: role
        description: "Le rôle de l'utilisateur (user ou admin)."
        required: true
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      username: johndoe
      email: john@example.com
      password: newsecret123
      adresse: '456 Avenue Secondaire, Ville'
      role: admin
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "userId": 1,
            "username": "johndoe",
            "email": "john@example.com",
            "adresse": "456 Avenue Secondaire, Ville",
            "role": "admin",
            "createdAt": "2025-05-19T18:15:00+01:00",
            "updated_at": "2025-05-19T18:16:00+01:00"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": {
              "email": ["The email has already been taken."]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/users/{id}'
    metadata:
      groupName: 'Gestion des Utilisateurs'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Supprimer un utilisateur'
      description: 'Supprime un utilisateur de la base de données par son ID.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "Not found."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
